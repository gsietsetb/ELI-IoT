.TH "/home/guille/msm/net/mac80211/debugfs_netdev.c" 3 "Sun Jun 1 2014" "Version 1.0" "net_mac80211" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/guille/msm/net/mac80211/debugfs_netdev.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <linux/kernel\&.h>\fP
.br
\fC#include <linux/device\&.h>\fP
.br
\fC#include <linux/if\&.h>\fP
.br
\fC#include <linux/interrupt\&.h>\fP
.br
\fC#include <linux/netdevice\&.h>\fP
.br
\fC#include <linux/rtnetlink\&.h>\fP
.br
\fC#include <linux/slab\&.h>\fP
.br
\fC#include <linux/notifier\&.h>\fP
.br
\fC#include <net/mac80211\&.h>\fP
.br
\fC#include <net/cfg80211\&.h>\fP
.br
\fC#include 'ieee80211_i\&.h'\fP
.br
\fC#include 'rate\&.h'\fP
.br
\fC#include 'debugfs\&.h'\fP
.br
\fC#include 'debugfs_netdev\&.h'\fP
.br
\fC#include 'driver-ops\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT\fP(name, field, format_string)"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_DEC\fP(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%d\\n')"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_HEX\fP(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%#x\\n')"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_LHEX\fP(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%#lx\\n')"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_SIZE\fP(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%zd\\n')"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_HEXARRAY\fP(name, field)"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_ATOMIC\fP(name, field)"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_MAC\fP(name, field)"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FMT_DEC_DIV_16\fP(name, field)"
.br
.ti -1c
.RI "#define \fB__IEEE80211_IF_FILE\fP(name, _write)"
.br
.ti -1c
.RI "#define \fB__IEEE80211_IF_FILE_W\fP(name)"
.br
.ti -1c
.RI "#define \fBIEEE80211_IF_FILE\fP(name, field, format)"
.br
.ti -1c
.RI "#define \fBDEBUGFS_ADD\fP(name)"
.br
.ti -1c
.RI "#define \fBDEBUGFS_ADD_MODE\fP(name, mode)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (drop_unencrypted, drop_unencrypted, DEC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (rc_rateidx_mask_2ghz, rc_rateidx_mask[IEEE80211_BAND_2GHZ], HEX)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (rc_rateidx_mask_5ghz, rc_rateidx_mask[IEEE80211_BAND_5GHZ], HEX)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (rc_rateidx_mcs_mask_2ghz, rc_rateidx_mcs_mask[IEEE80211_BAND_2GHZ], HEXARRAY)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (rc_rateidx_mcs_mask_5ghz, rc_rateidx_mcs_mask[IEEE80211_BAND_5GHZ], HEXARRAY)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (flags, flags, HEX)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (state, state, LHEX)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (channel_type, vif\&.bss_conf\&.channel_type, DEC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (bssid, u\&.mgd\&.bssid, MAC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (aid, u\&.mgd\&.aid, DEC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (last_beacon, u\&.mgd\&.last_beacon_signal, DEC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (ave_beacon, u\&.mgd\&.ave_beacon_signal, DEC_DIV_16)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE_W\fP (smps)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE_W\fP (tkip_mic_test)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE_W\fP (uapsd_queues)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE_W\fP (uapsd_max_sp_len)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (num_sta_authorized, u\&.ap\&.num_sta_authorized, ATOMIC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (num_sta_ps, u\&.ap\&.num_sta_ps, ATOMIC)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (dtim_count, u\&.ap\&.dtim_count, DEC)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE\fP (num_buffered_multicast, NULL)"
.br
.ti -1c
.RI "\fB__IEEE80211_IF_FILE_W\fP (tsf)"
.br
.ti -1c
.RI "\fBIEEE80211_IF_FILE\fP (peer, u\&.wds\&.remote_addr, MAC)"
.br
.ti -1c
.RI "void \fBieee80211_debugfs_add_netdev\fP (struct \fBieee80211_sub_if_data\fP *sdata)"
.br
.ti -1c
.RI "void \fBieee80211_debugfs_remove_netdev\fP (struct \fBieee80211_sub_if_data\fP *sdata)"
.br
.ti -1c
.RI "void \fBieee80211_debugfs_rename_netdev\fP (struct \fBieee80211_sub_if_data\fP *sdata)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __IEEE80211_IF_FILE(name, _write)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_read_##name(struct file *file,        \
                    char __user *userbuf,       \
                    size_t count, loff_t *ppos) \
{                                   \
    return ieee80211_if_read(file->private_data,            \
                 userbuf, count, ppos,          \
                 ieee80211_if_fmt_##name);      \
}                                   \
static const struct file_operations name##_ops = {          \
    \&.read = ieee80211_if_read_##name,                \
    \&.write = (_write),                       \
    \&.open = simple_open,                     \
    \&.llseek = generic_file_llseek,                   \
}
.fi
.PP
Definition at line 126 of file debugfs_netdev\&.c\&.
.SS "#define __IEEE80211_IF_FILE_W(name)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_write_##name(struct file *file,        \
                     const char __user *userbuf,    \
                     size_t count, loff_t *ppos)    \
{                                   \
    return ieee80211_if_write(file->private_data, userbuf, count,   \
                  ppos, ieee80211_if_parse_##name); \
}                                   \
__IEEE80211_IF_FILE(name, ieee80211_if_write_##name)
.fi
.PP
Definition at line 142 of file debugfs_netdev\&.c\&.
.SS "#define DEBUGFS_ADD(name)"
\fBValue:\fP
.PP
.nf
debugfs_create_file(#name, 0400, sdata->debugfs\&.dir, \
                sdata, &name##_ops);
.fi
.PP
Definition at line 503 of file debugfs_netdev\&.c\&.
.SS "#define DEBUGFS_ADD_MODE(name, mode)"
\fBValue:\fP
.PP
.nf
debugfs_create_file(#name, mode, sdata->debugfs\&.dir, \
                sdata, &name##_ops);
.fi
.PP
Definition at line 507 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FILE(name, field, format)"
\fBValue:\fP
.PP
.nf
IEEE80211_IF_FMT_##format(name, field)          \
        __IEEE80211_IF_FILE(name, NULL)
.fi
.PP
Definition at line 153 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT(name, field, format_string)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_fmt_##name(                   \
    const struct ieee80211_sub_if_data *sdata, char *buf,       \
    int buflen)                         \
{                                   \
    return scnprintf(buf, buflen, format_string, sdata->field); \
}
.fi
.PP
Definition at line 71 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_ATOMIC(name, field)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_fmt_##name(                    \
    const struct ieee80211_sub_if_data *sdata,          \
    char *buf, int buflen)                      \
{                                   \
    return scnprintf(buf, buflen, "%d\n", atomic_read(&sdata->field));\
}
.fi
.PP
Definition at line 102 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_DEC(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%d\\n')"

.PP
Definition at line 78 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_DEC_DIV_16(name, field)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_fmt_##name(                    \
    const struct ieee80211_sub_if_data *sdata,          \
    char *buf, int buflen)                      \
{                                   \
    return scnprintf(buf, buflen, "%d\n", sdata->field / 16);   \
}
.fi
.PP
Definition at line 118 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_HEX(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%#x\\n')"

.PP
Definition at line 80 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_HEXARRAY(name, field)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_fmt_##name(                 \
    const struct ieee80211_sub_if_data *sdata,          \
    char *buf, int buflen)                      \
{                                   \
    char *p = buf;                          \
    int i;                              \
    for (i = 0; i < sizeof(sdata->field); i++) {            \
        p += scnprintf(p, buflen + buf - p, "%\&.2x ",     \
                 sdata->field[i]);          \
    }                               \
    p += scnprintf(p, buflen + buf - p, "\n");          \
    return p - buf;                         \
}
.fi
.PP
Definition at line 87 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_LHEX(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%#lx\\n')"

.PP
Definition at line 82 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_MAC(name, field)"
\fBValue:\fP
.PP
.nf
static ssize_t ieee80211_if_fmt_##name(                 \
    const struct ieee80211_sub_if_data *sdata, char *buf,       \
    int buflen)                         \
{                                   \
    return scnprintf(buf, buflen, "%pM\n", sdata->field);       \
}
.fi
.PP
Definition at line 110 of file debugfs_netdev\&.c\&.
.SS "#define IEEE80211_IF_FMT_SIZE(name, field)   \fBIEEE80211_IF_FMT\fP(name, field, '%zd\\n')"

.PP
Definition at line 84 of file debugfs_netdev\&.c\&.
.SH "Function Documentation"
.PP 
.SS "__IEEE80211_IF_FILE (num_buffered_multicast, NULL)"

.SS "__IEEE80211_IF_FILE_W (smps)"

.SS "__IEEE80211_IF_FILE_W (tkip_mic_test)"

.SS "__IEEE80211_IF_FILE_W (uapsd_queues)"

.SS "__IEEE80211_IF_FILE_W (uapsd_max_sp_len)"

.SS "__IEEE80211_IF_FILE_W (tsf)"

.SS "void ieee80211_debugfs_add_netdev (struct \fBieee80211_sub_if_data\fP *sdata)"

.PP
Definition at line 685 of file debugfs_netdev\&.c\&.
.SS "void ieee80211_debugfs_remove_netdev (struct \fBieee80211_sub_if_data\fP *sdata)"

.PP
Definition at line 698 of file debugfs_netdev\&.c\&.
.SS "void ieee80211_debugfs_rename_netdev (struct \fBieee80211_sub_if_data\fP *sdata)"

.PP
Definition at line 707 of file debugfs_netdev\&.c\&.
.SS "IEEE80211_IF_FILE (drop_unencrypted, drop_unencrypted, DEC)"

.SS "IEEE80211_IF_FILE (rc_rateidx_mask_2ghz, rc_rateidx_mask[IEEE80211_BAND_2GHZ], HEX)"

.SS "IEEE80211_IF_FILE (rc_rateidx_mask_5ghz, rc_rateidx_mask[IEEE80211_BAND_5GHZ], HEX)"

.SS "IEEE80211_IF_FILE (rc_rateidx_mcs_mask_2ghz, rc_rateidx_mcs_mask[IEEE80211_BAND_2GHZ], HEXARRAY)"

.SS "IEEE80211_IF_FILE (rc_rateidx_mcs_mask_5ghz, rc_rateidx_mcs_mask[IEEE80211_BAND_5GHZ], HEXARRAY)"

.SS "IEEE80211_IF_FILE (flags, flags, HEX)"

.SS "IEEE80211_IF_FILE (state, state, LHEX)"

.SS "IEEE80211_IF_FILE (channel_type, vif\&.bss_conf\&.channel_type, DEC)"

.SS "IEEE80211_IF_FILE (bssid, u\&.mgd\&.bssid, MAC)"

.SS "IEEE80211_IF_FILE (aid, u\&.mgd\&.aid, DEC)"

.SS "IEEE80211_IF_FILE (last_beacon, u\&.mgd\&.last_beacon_signal, DEC)"

.SS "IEEE80211_IF_FILE (ave_beacon, u\&.mgd\&.ave_beacon_signal, DEC_DIV_16)"

.SS "IEEE80211_IF_FILE (num_sta_authorized, u\&.ap\&.num_sta_authorized, ATOMIC)"

.SS "IEEE80211_IF_FILE (num_sta_ps, u\&.ap\&.num_sta_ps, ATOMIC)"

.SS "IEEE80211_IF_FILE (dtim_count, u\&.ap\&.dtim_count, DEC)"

.SS "IEEE80211_IF_FILE (peer, u\&.wds\&.remote_addr, MAC)"

.SH "Author"
.PP 
Generated automatically by Doxygen for net_mac80211 from the source code\&.
