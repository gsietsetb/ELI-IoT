0a1
> #define _GNU_SOURCE
8a10
> #include <time.h>
10,11c12,13
< #define BAUDRATE B57600
< #define BAUDRATE_S "57600"
---
> #define BAUDRATE B115200
> #define BAUDRATE_S "115200"
18,37c20,39
< #define SLIP_END     0300
< #define SLIP_ESC     0333
< #define SLIP_ESC_END 0334
< #define SLIP_ESC_ESC 0335
< 
< #define CSNA_INIT 0x01
< 
< #define BUFSIZE 40
< #define HCOLS 20
< #define ICOLS 18
< 
< #define MODE_START_DATE	0
< #define MODE_DATE	1
< #define MODE_START_TEXT	2
< #define MODE_TEXT	3
< #define MODE_INT	4
< #define MODE_HEX	5
< #define MODE_SLIP_AUTO	6
< #define MODE_SLIP	7
< #define MODE_SLIP_HIDE	8
---
> #define SLIP_END      0300
> #define SLIP_ESC      0333
> #define SLIP_ESC_END  0334
> #define SLIP_ESC_ESC  0335
> 
> #define CSNA_INIT     0x01
> 
> #define BUFSIZE         40
> #define HCOLS           20
> #define ICOLS           18
> 
> #define MODE_START_DATE  0
> #define MODE_DATE        1
> #define MODE_START_TEXT  2
> #define MODE_TEXT        3
> #define MODE_INT         4
> #define MODE_HEX         5
> #define MODE_SLIP_AUTO   6
> #define MODE_SLIP        7
> #define MODE_SLIP_HIDE   8
83c85,86
< int main(int argc, char **argv)
---
> int
> main(int argc, char **argv)
98,99c101,102
<   while (index < argc) {
<     if (argv[index][0] == '-') {
---
>   while(index < argc) {
>     if(argv[index][0] == '-') {
101,151c104,154
<       case 'b':
< 	/* set speed */
< 	if (strcmp(&argv[index][2], "38400") == 0) {
< 	  speed = B38400;
< 	  speedname = "38400";
< 	} else if (strcmp(&argv[index][2], "19200") == 0) {
< 	  speed = B19200;
< 	  speedname = "19200";
< 	} else if (strcmp(&argv[index][2], "57600") == 0) {
< 	  speed = B57600;
< 	  speedname = "57600";
< 	} else if (strcmp(&argv[index][2], "115200") == 0) {
< 	  speed = B115200;
< 	  speedname = "115200";
< 	} else {
< 	  fprintf(stderr, "unsupported speed: %s\n", &argv[index][2]);
< 	  return usage(1);
< 	}
< 	break;
<       case 'x':
< 	mode = MODE_HEX;
< 	break;
<       case 'i':
< 	mode = MODE_INT;
< 	break;
<       case 's':
< 	switch(argv[index][2]) {
< 	case 'n':
< 	  mode = MODE_SLIP_HIDE;
< 	  break;
< 	case 'o':
< 	  mode = MODE_SLIP;
< 	  break;
< 	default:
< 	  mode = MODE_SLIP_AUTO;
< 	  break;
< 	}
< 	break;
<       case 'T':
< 	if(strlen(&argv[index][2]) == 0) {
< 	  timeformat = "%Y-%m-%d %H:%M:%S";
< 	} else {
< 	  timeformat = &argv[index][2];
< 	}
< 	mode = MODE_START_DATE;
< 	break;
<       case 'h':
< 	return usage(0);
<       default:
< 	fprintf(stderr, "unknown option '%c'\n", argv[index][1]);
< 	return usage(1);
---
>         case 'b':
>           /* set speed */
>           if(strcmp(&argv[index][2], "38400") == 0) {
>             speed = B38400;
>             speedname = "38400";
>           } else if(strcmp(&argv[index][2], "19200") == 0) {
>             speed = B19200;
>             speedname = "19200";
>           } else if(strcmp(&argv[index][2], "57600") == 0) {
>             speed = B57600;
>             speedname = "57600";
>           } else if(strcmp(&argv[index][2], "115200") == 0) {
>             speed = B115200;
>             speedname = "115200";
>           } else {
>             fprintf(stderr, "unsupported speed: %s\n", &argv[index][2]);
>             return usage(1);
>           }
>           break;
>         case 'x':
>           mode = MODE_HEX;
>           break;
>         case 'i':
>           mode = MODE_INT;
>           break;
>         case 's':
>           switch(argv[index][2]) {
>             case 'n':
>               mode = MODE_SLIP_HIDE;
>               break;
>             case 'o':
>               mode = MODE_SLIP;
>               break;
>             default:
>               mode = MODE_SLIP_AUTO;
>               break;
>           }
>           break;
>         case 'T':
>           if(strlen(&argv[index][2]) == 0) {
>             timeformat = "%Y-%m-%d %H:%M:%S";
>           } else {
>             timeformat = &argv[index][2];
>           }
>           mode = MODE_START_DATE;
>           break;
>         case 'h':
>           return usage(0);
>         default:
>           fprintf(stderr, "unknown option '%c'\n", argv[index][1]);
>           return usage(1);
156,158c159,161
<       if (index < argc) {
< 	fprintf(stderr, "too many arguments\n");
< 	return usage(1);
---
>       if(index < argc) {
>         fprintf(stderr, "too many arguments\n");
>         return usage(1);
164,165c167,171
< #ifndef __APPLE__
<   fd = open(device, O_RDWR | O_NOCTTY | O_NDELAY | O_DIRECT | O_SYNC );
---
> #ifdef O_SYNC
>   fd = open(device, O_RDWR | O_NOCTTY | O_NDELAY | O_DIRECT | O_SYNC);
>   if(fd < 0 && errno == EINVAL){ // O_SYNC not supported (e.g. raspberian)
>     fd = open(device, O_RDWR | O_NOCTTY | O_NDELAY | O_DIRECT);
>   }
169c175
<   if (fd <0) {
---
>   if(fd < 0) {
171c177
<     perror(device);
---
>     perror("open");
176c182
<   if (fcntl(fd, F_SETFL, 0) < 0) {
---
>   if(fcntl(fd, F_SETFL, 0) < 0) {
181c187
<   if (tcgetattr(fd, &options) < 0) {
---
>   if(tcgetattr(fd, &options) < 0) {
185c191
< /*   fprintf(stderr, "serial options set\n"); */
---
>   /*   fprintf(stderr, "serial options set\n"); */
191c197
<   options.c_cflag &= ~(CSIZE|PARENB|PARODD);
---
>   options.c_cflag &= ~(CSIZE | PARENB | PARODD);
200c206
<   if (tcsetattr(fd, TCSANOW, &options) < 0) {
---
>   if(tcsetattr(fd, TCSANOW, &options) < 0) {
206,209c212,215
< /*    if (fcntl(fd, F_SETFL, FNDELAY) < 0) { */
< /*      perror("\ncould not set fcntl"); */
< /*      exit(-1); */
< /*    } */
---
>   /*    if (fcntl(fd, F_SETFL, FNDELAY) < 0) { */
>   /*      perror("\ncould not set fcntl"); */
>   /*      exit(-1); */
>   /*    } */
216c222
<   for (;;) {
---
>   for(;;) {
218,219c224
<     nfound = select(FD_SETSIZE, &smask, (fd_set *) 0, (fd_set *) 0,
< 		    (struct timeval *) 0);
---
>     nfound = select(FD_SETSIZE, &smask, (fd_set *) 0, (fd_set *) 0, (struct timeval *) 0);
221,223c226,228
<       if (errno == EINTR) {
< 	fprintf(stderr, "interrupted system call\n");
< 	continue;
---
>       if(errno == EINTR) {
>         fprintf(stderr, "interrupted system call\n");
>         continue;
233,255c238,260
<       if (n < 0) {
< 	perror("could not read");
< 	exit(-1);
<       } else if (n > 0) {
< 	/* because commands might need parameters, lines needs to be
< 	   separated which means the terminating LF must be sent */
< /* 	while(n > 0 && buf[n - 1] < 32) { */
< /* 	  n--; */
< /* 	} */
< 	if(n > 0) {
< 	  int i;
< 	  /*	  fprintf(stderr, "SEND %d bytes\n", n);*/
< 	  /* write slowly */
< 	  for (i = 0; i < n; i++) {
< 	    if (write(fd, &buf[i], 1) <= 0) {
< 	      perror("write");
< 	      exit(1);
< 	    } else {
< 	      fflush(NULL);
< 	      usleep(6000);
< 	    }
< 	  }
< 	}
---
>       if(n < 0) {
>         perror("could not read");
>         exit(-1);
>       } else if(n > 0) {
>         /* because commands might need parameters, lines needs to be
>          separated which means the terminating LF must be sent */
>         /*   while(n > 0 && buf[n - 1] < 32) { */
>         /*     n--; */
>         /*   } */
>         if(n > 0) {
>           int i;
>           /*    fprintf(stderr, "SEND %d bytes\n", n);*/
>           /* write slowly */
>           for(i = 0; i < n; i++) {
>             if(write(fd, &buf[i], 1) <= 0) {
>               perror("write");
>               exit(1);
>             } else {
>               fflush(NULL);
>               usleep(6000);
>             }
>           }
>         }
257,258c262,263
< 	/* End of input, exit. */
< 	exit(0);
---
>         /* End of input, exit. */
>         exit(0);
264,266c269,271
<       if (n < 0) {
< 	perror("could not read");
< 	exit(-1);
---
>       if(n < 0) {
>         perror("could not read");
>         exit(-1);
270,360c275,364
< 	switch(mode) {
< 	case MODE_START_TEXT:
< 	case MODE_TEXT:
< 	  printf("%c", buf[i]);
< 	  break;
< 	case MODE_START_DATE: {
< 	  time_t t;
< 	  t = time(&t);
< 	  strftime(outbuf, HCOLS, timeformat, localtime(&t));
< 	  printf("%s|", outbuf);
< 	  mode = MODE_DATE;
< 	}
< 	  /* continue into the MODE_DATE */
< 	case MODE_DATE:
< 	  printf("%c", buf[i]);
< 	  if(buf[i] == '\n') {
< 	    mode = MODE_START_DATE;
< 	  }
< 	  break;
< 	case MODE_INT:
< 	  printf("%03d ", buf[i]);
< 	  if(++index >= ICOLS) {
< 	    index = 0;
< 	    printf("\n");
< 	  }
< 	  break;
< 	case MODE_HEX:
< 	  rxbuf[index++] = buf[i];
< 	  if(index >= HCOLS) {
< 	    print_hex_line("", rxbuf, index);
< 	    index = 0;
< 	    printf("\n");
< 	  }
< 	  break;
< 
< 	case MODE_SLIP_AUTO:
< 	case MODE_SLIP_HIDE:
< 	  if(!flags && (buf[i] != SLIP_END)) {
< 	    /* Not a SLIP packet? */
< 	    printf("%c", buf[i]);
< 	    break;
< 	  }
< 	  /* continue to slip only mode */
< 	case MODE_SLIP:
< 	  switch(buf[i]) {
< 	  case SLIP_ESC:
< 	    lastc = SLIP_ESC;
< 	    break;
< 
< 	  case SLIP_END:
< 	    if(index > 0) {
< 	      if(flags != 2 && mode != MODE_SLIP_HIDE) {
< 		/* not overflowed: show packet */
< 		print_hex_line("SLIP: ", rxbuf,
< 			       index > HCOLS ? HCOLS : index);
< 		printf("\n");
< 	      }
< 	      lastc = '\0';
< 	      index = 0;
< 	      flags = 0;
< 	    } else {
< 	      flags = !flags;
< 	    }
< 	    break;
< 
< 	  default:
< 	    if(lastc == SLIP_ESC) {
< 	      lastc = '\0';
< 
< 	      /* Previous read byte was an escape byte, so this byte will be
< 		 interpreted differently from others. */
< 	      switch(buf[i]) {
< 	      case SLIP_ESC_END:
< 		buf[i] = SLIP_END;
< 		break;
< 	      case SLIP_ESC_ESC:
< 		buf[i] = SLIP_ESC;
< 		break;
< 	      }
< 	    }
< 
< 	    rxbuf[index++] = buf[i];
< 	    if(index >= sizeof(rxbuf)) {
< 	      fprintf(stderr, "**** slip overflow\n");
< 	      index = 0;
< 	      flags = 2;
< 	    }
< 	    break;
< 	  }
< 	  break;
< 	}
---
>         switch(mode) {
>           case MODE_START_TEXT:
>           case MODE_TEXT:
>             printf("%c", buf[i]);
>             break;
>           case MODE_START_DATE: {
>             time_t t;
>             t = time(&t);
>             strftime(outbuf, HCOLS, timeformat, localtime(&t));
>             printf("%s|", outbuf);
>             mode = MODE_DATE;
>           }
>             /* continue into the MODE_DATE */
>           case MODE_DATE:
>             printf("%c", buf[i]);
>             if(buf[i] == '\n') {
>               mode = MODE_START_DATE;
>             }
>             break;
>           case MODE_INT:
>             printf("%03d ", buf[i]);
>             if(++index >= ICOLS) {
>               index = 0;
>               printf("\n");
>             }
>             break;
>           case MODE_HEX:
>             rxbuf[index++] = buf[i];
>             if(index >= HCOLS) {
>               print_hex_line("", rxbuf, index);
>               index = 0;
>               printf("\n");
>             }
>             break;
> 
>           case MODE_SLIP_AUTO:
>           case MODE_SLIP_HIDE:
>             if(!flags && (buf[i] != SLIP_END)) {
>               /* Not a SLIP packet? */
>               printf("%c", buf[i]);
>               break;
>             }
>             /* continue to slip only mode */
>           case MODE_SLIP:
>             switch(buf[i]) {
>               case SLIP_ESC:
>                 lastc = SLIP_ESC;
>                 break;
> 
>               case SLIP_END:
>                 if(index > 0) {
>                   if(flags != 2 && mode != MODE_SLIP_HIDE) {
>                     /* not overflowed: show packet */
>                     print_hex_line("SLIP: ", rxbuf, index > HCOLS ? HCOLS : index);
>                     printf("\n");
>                   }
>                   lastc = '\0';
>                   index = 0;
>                   flags = 0;
>                 } else {
>                   flags = !flags;
>                 }
>                 break;
> 
>               default:
>                 if(lastc == SLIP_ESC) {
>                   lastc = '\0';
> 
>                   /* Previous read byte was an escape byte, so this byte will be
>                    interpreted differently from others. */
>                   switch(buf[i]) {
>                     case SLIP_ESC_END:
>                       buf[i] = SLIP_END;
>                       break;
>                     case SLIP_ESC_ESC:
>                       buf[i] = SLIP_ESC;
>                       break;
>                   }
>                 }
> 
>                 rxbuf[index++] = buf[i];
>                 if(index >= sizeof(rxbuf)) {
>                   fprintf(stderr, "**** slip overflow\n");
>                   index = 0;
>                   flags = 2;
>                 }
>                 break;
>             }
>             break;
>         }
365,369c369,373
< 	switch(mode) {
< 	case MODE_HEX:
< 	  print_hex_line("", rxbuf, index);
< 	  break;
< 	}
---
>         switch(mode) {
>           case MODE_HEX:
>             print_hex_line("", rxbuf, index);
>             break;
>         }
